dS2 <- parms["mu"] * (y["S2"] + y["I2"] + y["R2"]) -
parms["beta2"] * y["S2"] * y["I2"] - parms["beta.mix"] * y["S2"] * y["I1"] -
parms["mu"] * y["S2"] + parms["imm.wane"] * y["R2"]
# Calculate the change in Infecteds (patch 2)
dI2 <- parms["beta2"] * y["S2"] * y["I2"] + parms["beta.mix"] * y["S2"] * y["I1"] -
(parms["mu"] + parms["gamma"]) * y["I2"]
# Calculate the change in Recovereds (patch 2)
dR2 <- parms["gamma"] * y["I2"] - parms["mu"] * y["R2"] - parms["imm.wane"] * y["R2"]
# Return a list with the changes in S, I, R (in each patch) at the current time step
return(list(c(dS1, dI1, dR1, dS2, dI2, dR2)))
}
# Sequence of times at which we estimate
# (here, we do daily for 365 days - you can change this value)
times_vector <- seq(from=0, to=365, by=1)
# Run the ODE solver
SIR.output <- ode(y=c(S1=START.S1, I1=START.I1, R1=START.R1, S2=START.S2, I2=START.I2, R2=START.R2),
times=times_vector,
func=dx.dt.SIR_2patch,
parms=parms_vector)
# S, I, R in patch 1
plot(x=SIR.output[,"time"],y=SIR.output[,"S1"], type="l", lwd=2, col="blue",
xlab="Time (days)", ylab="Counts", main="Group 1 - High Trust in Government", ylim=c(0,12000))
lines(x=SIR.output[,"time"],y=SIR.output[,"I1"], lwd=2, col="red")
lines(x=SIR.output[,"time"],y=SIR.output[,"R1"], lwd=2, col="green")
legend("right", c("S1", "I1", "R1"), lwd=2, col=c("blue","red","green","black"), lty=1,bty="n")
# S, I, R in patch 2
plot(x=SIR.output[,"time"],y=SIR.output[,"S2"], type="l", lwd=2, col="turquoise",
xlab="Time (days)", ylab="Counts",main="Group 2 - Low Trust in Government", ylim=c(0,12000))
points(x=SIR.output[,"time"],y=SIR.output[,"I2"], type="l", lwd=2, col="magenta")
points(x=SIR.output[,"time"],y=SIR.output[,"R2"], type="l", lwd=2, col="darkgreen")
legend("right", c("S2", "I2", "R2"), lwd=2, col=c("turquoise","magenta","darkgreen"), lty=1,bty="n")
library(deSolve)
## Mean Life Expectancy - too short? ##
mu <- 1/(60*365)
gamma <- 1/5
R0 <- 3
##
beta1 <- 0.0003
beta2 <- 3 * beta1
beta.mix <-  0.1 * beta1
## should I add immunity wane?
vacc.rate <- 1/365
imm.wane <- 1/365
# Set initial conditions S, I, R ("y") in the two patches: S1, S2, I1, I2, R1, R2
START.S1 <- 10000 - 1
START.S2 <- 10000 - 1
START.I1 <- 1
START.I2 <- 1
START.R1 <- 0
START.R2 <- 0
START.N1 <- START.S1 + START.I1 + START.R1
START.N2 <- START.S2 + START.I2 + START.R2
# Create the parameter vector
parms_vector <- c(mu=mu, beta1=beta1, beta2=beta2, beta.mix=beta.mix,
gamma=gamma, vacc.rate=vacc.rate, imm.wane=imm.wane)
dx.dt.SIR_2patch <- function(t, y, parms) {
## Patch 1 (High Trust In Government):
# Calculate the change in Susceptibles (patch 1)
dS1 <- parms["mu"] * (y["S1"] + y["I1"] + y["R1"])
- parms["vacc.rate"] * y["S1"]-
parms["beta1"] * y["S1"] * y["I1"] - parms["beta.mix"] * y["S1"] * y["I2"] -
parms["mu"] * y["S1"] + parms["imm.wane"] * y["R1"]
# Calculate the change in Infecteds (patch 1)
dI1 <- parms["beta1"] * y["S1"] * y["I1"] + parms["beta.mix"] * y["S1"] * y["I2"]  -
parms["mu"] * y["I1"] - parms["gamma"] * y["I1"]
# Calculate the change in Recovereds (patch 1)
dR1 <- parms["vacc.rate"] * parms["mu"] * y["S1"] +
parms["gamma"] * y["I1"] - parms["mu"] * y["R1"] - parms["imm.wane"] * y["R1"]
## Patch 2 (Low Trust in Government):
# Calculate the change in Susceptibles (patch 2)
dS2 <- parms["mu"] * (y["S2"] + y["I2"] + y["R2"]) -
parms["beta2"] * y["S2"] * y["I2"] - parms["beta.mix"] * y["S2"] * y["I1"] -
parms["mu"] * y["S2"] + parms["imm.wane"] * y["R2"]
# Calculate the change in Infecteds (patch 2)
dI2 <- parms["beta2"] * y["S2"] * y["I2"] + parms["beta.mix"] * y["S2"] * y["I1"] -
(parms["mu"] + parms["gamma"]) * y["I2"]
# Calculate the change in Recovereds (patch 2)
dR2 <- parms["gamma"] * y["I2"] - parms["mu"] * y["R2"] - parms["imm.wane"] * y["R2"]
# Return a list with the changes in S, I, R (in each patch) at the current time step
return(list(c(dS1, dI1, dR1, dS2, dI2, dR2)))
}
# Sequence of times at which we estimate
# (here, we do daily for 365 days - you can change this value)
times_vector <- seq(from=0, to=365, by=1)
# Run the ODE solver
SIR.output <- ode(y=c(S1=START.S1, I1=START.I1, R1=START.R1, S2=START.S2, I2=START.I2, R2=START.R2),
times=times_vector,
func=dx.dt.SIR_2patch,
parms=parms_vector)
# S, I, R in patch 1
plot(x=SIR.output[,"time"],y=SIR.output[,"S1"], type="l", lwd=2, col="blue",
xlab="Time (days)", ylab="Counts", main="Group 1 - High Trust in Government", ylim=c(0,12000))
lines(x=SIR.output[,"time"],y=SIR.output[,"I1"], lwd=2, col="red")
lines(x=SIR.output[,"time"],y=SIR.output[,"R1"], lwd=2, col="green")
legend("right", c("S1", "I1", "R1"), lwd=2, col=c("blue","red","green","black"), lty=1,bty="n")
# S, I, R in patch 2
plot(x=SIR.output[,"time"],y=SIR.output[,"S2"], type="l", lwd=2, col="turquoise",
xlab="Time (days)", ylab="Counts",main="Group 2 - Low Trust in Government", ylim=c(0,12000))
points(x=SIR.output[,"time"],y=SIR.output[,"I2"], type="l", lwd=2, col="magenta")
points(x=SIR.output[,"time"],y=SIR.output[,"R2"], type="l", lwd=2, col="darkgreen")
legend("right", c("S2", "I2", "R2"), lwd=2, col=c("turquoise","magenta","darkgreen"), lty=1,bty="n")
library(deSolve)
## Mean Life Expectancy - too short? ##
mu <- 1/(50*365)
gamma <- 1/7
R0 <- 3
##
beta1 <- 0.0003
beta2 <- 3 * beta1
beta.mix <-  0.1 * beta1
## should I add immunity wane?
vacc.rate <- 99/100
imm.wane <- 1/365
# Set initial conditions S, I, R ("y") in the two patches: S1, S2, I1, I2, R1, R2
START.S1 <- 10000 - 1
START.S2 <- 10000 - 1
START.I1 <- 1
START.I2 <- 1
START.R1 <- 0
START.R2 <- 0
START.N1 <- START.S1 + START.I1 + START.R1
START.N2 <- START.S2 + START.I2 + START.R2
# Create the parameter vector
parms_vector <- c(mu=mu, beta1=beta1, beta2=beta2, beta.mix=beta.mix,
gamma=gamma, vacc.rate=vacc.rate, imm.wane=imm.wane)
dx.dt.SIR_2patch <- function(t, y, parms) {
## Patch 1 (High Trust In Government):
# Calculate the change in Susceptibles (patch 1)
dS1 <- parms["mu"] * (y["S1"] + y["I1"] + y["R1"])
- parms["vacc.rate"] * y["S1"]-
parms["beta1"] * y["S1"] * y["I1"] - parms["beta.mix"] * y["S1"] * y["I2"] -
parms["mu"] * y["S1"] + parms["imm.wane"] * y["R1"]
# Calculate the change in Infecteds (patch 1)
dI1 <- parms["beta1"] * y["S1"] * y["I1"] + parms["beta.mix"] * y["S1"] * y["I2"]  -
parms["mu"] * y["I1"] - parms["gamma"] * y["I1"]
# Calculate the change in Recovereds (patch 1)
dR1 <- parms["vacc.rate"] * parms["mu"] * y["S1"] +
parms["gamma"] * y["I1"] - parms["mu"] * y["R1"] - parms["imm.wane"] * y["R1"]
## Patch 2 (Low Trust in Government):
# Calculate the change in Susceptibles (patch 2)
dS2 <- parms["mu"] * (y["S2"] + y["I2"] + y["R2"]) -
parms["beta2"] * y["S2"] * y["I2"] - parms["beta.mix"] * y["S2"] * y["I1"] -
parms["mu"] * y["S2"] + parms["imm.wane"] * y["R2"]
# Calculate the change in Infecteds (patch 2)
dI2 <- parms["beta2"] * y["S2"] * y["I2"] + parms["beta.mix"] * y["S2"] * y["I1"] -
(parms["mu"] + parms["gamma"]) * y["I2"]
# Calculate the change in Recovereds (patch 2)
dR2 <- parms["gamma"] * y["I2"] - parms["mu"] * y["R2"] - parms["imm.wane"] * y["R2"]
# Return a list with the changes in S, I, R (in each patch) at the current time step
return(list(c(dS1, dI1, dR1, dS2, dI2, dR2)))
}
# Sequence of times at which we estimate
# (here, we do daily for 365 days - you can change this value)
times_vector <- seq(from=0, to=365, by=1)
# Run the ODE solver
SIR.output <- ode(y=c(S1=START.S1, I1=START.I1, R1=START.R1, S2=START.S2, I2=START.I2, R2=START.R2),
times=times_vector,
func=dx.dt.SIR_2patch,
parms=parms_vector)
# S, I, R in patch 1
plot(x=SIR.output[,"time"],y=SIR.output[,"S1"], type="l", lwd=2, col="blue",
xlab="Time (days)", ylab="Counts", main="Group 1 - High Trust in Government", ylim=c(0,12000))
lines(x=SIR.output[,"time"],y=SIR.output[,"I1"], lwd=2, col="red")
lines(x=SIR.output[,"time"],y=SIR.output[,"R1"], lwd=2, col="green")
legend("right", c("S1", "I1", "R1"), lwd=2, col=c("blue","red","green","black"), lty=1,bty="n")
# S, I, R in patch 2
plot(x=SIR.output[,"time"],y=SIR.output[,"S2"], type="l", lwd=2, col="turquoise",
xlab="Time (days)", ylab="Counts",main="Group 2 - Low Trust in Government", ylim=c(0,12000))
points(x=SIR.output[,"time"],y=SIR.output[,"I2"], type="l", lwd=2, col="magenta")
points(x=SIR.output[,"time"],y=SIR.output[,"R2"], type="l", lwd=2, col="darkgreen")
legend("right", c("S2", "I2", "R2"), lwd=2, col=c("turquoise","magenta","darkgreen"), lty=1,bty="n")
1+4+25+9+2.5^2+25
1+4+25+9+2.5^2+25 + 5.5^2 + 49 + 0.25 + 1.5^2
sqrt(152)
sqrt(152/10)
200/3 * log(2)
?log
sqrt(200/3 * log(2))
THETA1.SET <- seq(0.1,0.7,by=0.1)
THETA2.SET <- seq(0.1,0.7,by=0.1)
SCALING <- c(0.001,0.01,0.1,0.5,1,2,10)
PARMS2FIT.SET <- data.frame('theta1','theta2','scaling')
View(PARMS2FIT.SET)
PARMS2FIT.SET <- data.frame(theta1=THETA1.SET,theta2=THETA2.SET,scaling=SCALING)
View(PARMS2FIT.SET)
THETA1.SET * THETA2.SET * SCALING
load("~/Documents/P3_UIV/BroadFluVacModel/calibration/USA.exPand.parms0.RData")
View(sim.results)
rm(list=ls())
library(deSolve)
load('H3Vac.invad.RData')
date(0.112328767123288)
library(lubridate)
date(0.112328767123288)
?lubridate
parse_date_time(0.112328767123288)
month(0.112328767123288)
parse_date_time(2000.112328767123288)
ymd(2000.112328767123288)
date(2000.112328767123288)
month(2000.112328767123288)
date_decimal(0.112328767123288)
date_decimal(1990.112328767123288)
date_decimal(0.361643835616438)
date_decimal(0.698630136986301)
date_decimal(0.865753424657534)
library(sf)
library(ggplot2)
library(raster)
require(maptools)
require(sp)
## simulation using fitted parameters
rm(list=ls())
library(deSolve)
library(dplyr)
library(gridExtra)
library(lubridate)
library(ggplot2)
theme_set(theme_bw())
sirmod <- function(t,y,parms){
with(as.list(c(y, parms)), {
beta0_1 <- R0_1*(gamma1+mu)
beta0_2 <- R0_2*(gamma2+mu)
beta1 <- beta0_1*(1+a1*cos(2*pi*t)) #seasonality forcing
beta2 <- beta0_2*(1+a2*cos(2*pi*t)) #seasonality forcing
dS <- mu-(rho+mu)*S-beta1*S*(I1+I21+IV1+IV21)-beta2*S*(I2+I12+IV2+IV12)+
sigma1*R1+sigma2*R2+sigmaV*V #susceptible
dI1 <- beta1*S*(I1+I21+IV1+IV21)-(gamma1+mu)*I1 #primary Strain1 infection
dRT1 <- gamma1*I1+sigmaV*RVT1-(mu+sigmaT+rho)*RT1 #strain-transcending immunized + infection-induced immunized against strain1
dR1 <- sigma2*R12 +sigmaT*RT1 +sigmaV*RV1 -
beta2*(1-theta1)*R1*(I2+I12+IV2+IV12) -(mu+sigma1+rho)*R1 #infection-induced immunized against strain1
dI12 <- beta2*(1-theta1)*R1*(I2+I12+IV2+IV12)-(mu+gamma2/(1-nu1))*I12 #recovered from primary strain1 infection and infected by strain2
dI2 <- beta2*S*(I2+I12+IV2+IV12)-(gamma2+mu)*I2 #primary Strain2 infection
dRT2 <- gamma2*I2 + sigmaV*RVT2 - (mu+sigmaT+rho)*RT2 #strain-transcending immunized + infection-induced immunized against strain2
dR2 <- sigma1*R12 +sigmaT*RT2 +sigmaV*RV2 -
beta1*(1-theta2)*R2*(I1+I21+IV1+IV21) -(mu+sigma2+rho)*R2 #infection-induced immunized against strain2
dI21 <- beta1*(1-theta2)*R2*(I1+I21+IV1+IV21)-(mu+gamma1/(1-nu2))*I21 #recovered from primary strain2 infection and infected by strain1
dV <- rho*S +sigma1*RV1+sigma2*RV2 -(mu+sigmaV)*V-
beta2*(1-tau)*V*(I2+I12+IV2+IV12)-beta1*(1-tau2)*V*(I1+I21+IV1+IV21) #vaccinated
dIV1 <- beta1*(1-tau2)*V*(I1+I21+IV1+IV21) - (gamma1/(1-eta2)+mu)*IV1
dRVT1 <- gamma1/(1-eta2)*IV1 + rho*RT1 - (sigmaV+sigmaT+mu)*RVT1
dRV1 <- sigma2*RV12 +sigmaT*RVT1 + rho*R1-
beta2*(1-theta1)*(1-tau)*RV1*(I2+I12+IV2+IV12)-(sigma1+sigmaV+mu)*RV1
dIV12 <- beta2*(1-theta1)*(1-tau)*RV1*(I2+I12+IV2+IV12) -
gamma2/(1-nu1)/(1-eta)*IV12 -mu*IV12
dIV2 <- beta2*(1-tau)*V*(I2+I12+IV2+IV12)-(gamma2/(1-eta)+mu)*IV2 #vaccinated individuals infected by strain2
dRVT2 <- gamma2/(1-eta)*IV2 + rho*RT2 - (sigmaV+sigmaT+mu)*RVT2 #strain-transcending immunized - recovered form strain2 infection
dRV2 <- sigma1*RV12 +sigmaT*RVT2 +rho*R2 -(sigma2+sigmaV+mu)*RV2 -
beta1*(1-theta2)*(1-tau2)*RV2*(I1+I21+IV1+IV21) #vaccinated individuals recovered from strain2 infection
dIV21 <- beta1*(1-theta2)*(1-tau2)*RV2*(I1+I21+IV1+IV21) -(gamma1/(1-eta2)/(1-nu2)+mu)*IV21
dRV12 <- gamma1/(1-eta2)/(1-nu2)*IV21 + gamma2/(1-nu1)/(1-eta)*IV12 +
rho*R12 -(sigma1+sigma2+sigmaV+mu)*RV12
dR12 <- gamma2/(1-nu1)*I12 +gamma1/(1-nu2)*I21 + sigmaV*RV12 -
(mu+sigma1+sigma2+rho)*R12 #recovered from natural infection of 1 and 2
## 'final' total infections during a time frame - strain 1
dItotal1 <- beta1*S*(I1+I21+IV1+IV21)+beta1*(1-theta2)*R2*(I1+I21+IV1+IV21)+
beta1*(1-tau2)*V*(I1+I21+IV1+IV21)+beta1*(1-theta2)*(1-tau2)*RV2*(I1+I21+IV1+IV21)
## 'final' total infections during a time frame - strain 2
dItotal2 <- beta2*S*(I2+I12+IV2+IV12)+beta2*(1-theta1)*R1*(I2+I12+IV2+IV12)+
beta2*(1-tau)*V*(I2+I12+IV2+IV12)+beta2*(1-theta1)*(1-tau)*RV1*(I2+I12+IV2+IV12)
res <- c(dS,dI1,dI2,dV,dR12,dR1,dR2,dI12,dI21,dIV2,dIV12,dRT1,dRT2,
dRV12,dRV1,dRV2,dRVT2,dIV1,dRVT1,dIV21,dItotal1,dItotal2)
return(list(res,inci1=beta1*S*(I1+I21+IV1+IV21)+beta1*(1-theta2)*R2*(I1+I21+IV1+IV21)+
beta1*(1-tau2)*V*(I1+I21+IV1+IV21)+beta1*(1-theta2)*(1-tau2)*RV2*(I1+I21+IV1+IV21),
inci2=beta2*S*(I2+I12+IV2+IV12)+beta2*(1-theta1)*R1*(I2+I12+IV2+IV12)+
beta2*(1-tau)*V*(I2+I12+IV2+IV12)+beta2*(1-theta1)*(1-tau)*RV1*(I2+I12+IV2+IV12)))
})
}
sim <- function(vac.rho,rel.parm,odefunc,start.cond,times.vec,parms.init){
parms.init['rho']<-vac.rho
if(parms.init['tau']!=1){
parms.init['tau']<-parms.init['tau']*rel.parm['rel.tau1']
if(parms.init['tau']>1)
parms.init['tau']<-1
}
if(parms.init['tau2']!=1){
parms.init['tau2']<-parms.init['tau2']*rel.parm['rel.tau2']
if(parms.init['tau2']>1)
parms.init['tau2']<-1
}
if(parms.init['sigmaV']!=1){
parms.init['sigmaV']<-parms.init['sigmaV']*rel.parm['rel.sigmaV']
if(parms.init['sigmaV']>1)
parms.init['sigmaV']<-1
}
SIR.output <- as.data.frame(rk4(y=start.cond, times=times.vec,func=odefunc,
parms=parms.init))
sim.output <- SIR.output %>%
mutate(time=time+1922,vac.cov=vac.rho,vac.sigma=parms.init['sigmaV'],
vac.tau1=parms.init['tau'],vac.tau2=parms.init['tau2'],
rel.tau1=rel.parm['rel.tau1'],rel.tau2=rel.parm['rel.tau2'],
rel.sigmaV=rel.parm['rel.sigmaV'])
return(sim.output)
}
sumry.cycl <-
function(simdf){
stats <- data.frame(strain=c('H3','H1'),avg.inci=0,epi.size=0,no.epi=0,
avg.epi.size=0,avg.max=0)
stats[stats$strain=='H1','avg.inci']=mean(simdf$inci1)
stats[stats$strain=='H3','avg.inci']=mean(simdf$inci2)
stats[stats$strain=='H1','global.min']=min(simdf$inci1)
stats[stats$strain=='H1','global.max']=max(simdf$inci1)
stats[stats$strain=='H3','global.min']=min(simdf$inci2)
stats[stats$strain=='H3','global.max']=max(simdf$inci2)
simdf <- simdf %>%
mutate(local.max1 = if_else(lag(inci1) < inci1 & lead(inci1) < inci1, TRUE, FALSE),
local.max2 = if_else(lag(inci2) < inci2 & lead(inci2) < inci2, TRUE, FALSE))
inci1.maxs <- simdf[which(simdf$local.max1),'inci1']
inci2.maxs <- simdf[which(simdf$local.max2),'inci2']
inci1.maxs <- inci1.maxs[which(inci1.maxs>mean(simdf$inci1))]
inci2.maxs <- inci2.maxs[which(inci2.maxs>mean(simdf$inci2))]
stats[stats$strain=='H1','epi.size']<-sum(inci1.maxs)
stats[stats$strain=='H1','no.epi']<-length(inci1.maxs)
stats[stats$strain=='H1','avg.max']<- if_else(length(inci1.maxs)==0,
0,sum(inci1.maxs)/length(inci1.maxs))
stats[stats$strain=='H1','avg.epi.size']<- if_else(length(inci1.maxs)==0,
stats[stats$strain=='H1','avg.inci'],
sum(inci1.maxs)/length(inci1.maxs))
stats[stats$strain=='H3','epi.size']<-sum(inci2.maxs)
stats[stats$strain=='H3','no.epi']<-length(inci2.maxs)
stats[stats$strain=='H3','avg.max']<- if_else(length(inci2.maxs)==0,
0,sum(inci2.maxs)/length(inci2.maxs))
stats[stats$strain=='H3','avg.epi.size']<- if_else(length(inci2.maxs)==0,
stats[stats$strain=='H3','avg.inci'],
sum(inci2.maxs)/length(inci2.maxs))
stats['vac.cov']=simdf[1,'vac.cov']
stats['vac.sigma']=simdf[1,'vac.sigma']
stats['vac.tau1']=simdf[1,'vac.tau1']
stats['vac.tau2']=simdf[1,'vac.tau2']
stats['rel.tau1']=simdf[1,'rel.tau1']
stats['rel.tau2']=simdf[1,'rel.tau2']
stats['rel.sigmaV']=simdf[1,'rel.sigmaV']
# inci1.sum <- sum(simdf['inci1'])
# inci2.sum <- sum(simdf['inci2'])
# simdf <- simdf %>%
#   mutate(p1=log(inci1)/inci1.sum*log(log(inci1)/inci1.sum),p2=log(inci2)/inci2.sum*log(log(inci2)/inci2.sum))
# stats[stats$strain=='H1','v'] <- -1/sum(simdf['p1'])
# stats[stats$strain=='H3','v'] <- -1/sum(simdf['p2'])
return(stats)
}
# initial parameter (w/ vaccine)
parms0 <- c(R0_1=1.44,R0_2=1.60,a1=0.1,a2=0.1,
sigma1=1/3.12,sigma2=1/2.28,
sigmaT=365/120,
# sigmaT=365/210,
gamma1=365/2.64,gamma2=365/3.03,
mu=1/70,nu1=0,nu2=0,rho=0,eta=0,eta2=0,
sigmaV=2/(3.12+2.28),tau=0,tau2=0,
theta1=0.31370367,theta2=0.27116601,scalingfactor=1.14597426)
# theta1=0.30599807,theta2=0.20525559,scalingfactor=1.04872127)
# theta1=0.40217111,theta2=0.29181265,scalingfactor=1.00164111)
# theta1=0.539076052,theta2=0.298498731,scalingfactor=1.059093609)
# theta1=0.470157472,theta2=0.219732517,scalingfactor=1.113495713)
# theta1=0.576979459,theta2=0.286407097,scalingfactor=1.137015578)
# theta1=0.275904768,theta2=0.217455701,scalingfactor=1.197965967)
# theta1=0.408058899,theta2=0.201343898,scalingfactor=1.091875172)
# theta1=0.5851486,theta2=0.203084143,scalingfactor=1.343577342)
parms0['beta0_1'] <- parms0['R0_1']*(parms0['gamma1']+parms0['mu'])
parms0['beta0_2'] <- parms0['R0_2']*(parms0['gamma2']+parms0['mu'])
sumry.cycl2 <- function(simdf){
sim.stats <- simdf %>%
mutate(year=year(date_decimal(time)),month=month(date_decimal(time))) %>%
filter(time>decimal_date(ymd("2004-06-30")) &
time<decimal_date(ymd("2019-07-01"))) %>%
mutate(Season=if_else(month<7,year-1,year)) %>%
filter(Season!=2009 & Season!=2010) %>%
group_by(Season) %>%
summarise(inci.total1 = parms0['scalingfactor']*sum(inci1,na.rm=TRUE),
inci.total2 = parms0['scalingfactor']*sum(inci2,na.rm=TRUE))%>%
mutate(predom=if_else(inci.total1>inci.total2,'H1',
if_else(inci.total1==inci.total2,'H1 or H3','H3')))
return(sim.stats)
}
# two subtype vaccine
parms1 <- parms0
parms1['tau'] <- parms1['theta1']
parms1['tau2'] <- parms1['theta2']
# H3 vaccine
parms2 <- parms1
parms2['tau2']<-1
parms2['sigmaV']<-parms0['sigma1']
# H1 vaccine
parms3 <- parms1
parms3['tau']<-1
parms3['sigmaV']<-parms0['sigma2']
start <- c(S=0.998,I1=0.001,I2=0.001,V=0,R12=0,R1=0,R2=0,I12=0,I21=0,IV2=0,
IV12=0,RT1=0,RT2=0,RV12=0,RV1=0,RV2=0,RVT2=0,
IV1=0,RVT1=0,IV21=0,Itotal1=0,Itotal2=0)
times <- seq(0,100,by=1/52)
# vaccine breadth
rel.parm <- c()
rel.parm['rel.sigmaV']<-1
stats.sum <- data.frame()
stats.sum2 <- data.frame()
simdf.meta.list<-list()
rho<-seq(0,1,by=0.1)
for (scaling in c(0.5,1,2)){
rel.parm['rel.tau1']<- scaling
rel.parm['rel.tau2']<- scaling
simdf.list1 <- lapply(rho,rel.parm=rel.parm,parms.init=parms1,odefunc=sirmod,
start.cond=start,times.vec=times,sim)
sumry.stats1 <- lapply(simdf.list1,sumry.cycl) %>% bind_rows()
sumry.stats1 <- sumry.stats1 %>%
mutate(scaling=scaling,vaccineImmunity='tau1=b*theta1\ntau2=b*theta2')
sumry.stats1b <- lapply(simdf.list1, sumry.cycl2) %>% bind_rows()
sumry.stats1b <- sumry.stats1b %>%
mutate(scaling=scaling,vaccineImmunity='tau1=b*theta1\ntau2=b*theta2')
simdf.list2 <- lapply(rho,rel.parm=rel.parm,parms.init=parms2,odefunc=sirmod,
start.cond=start,times.vec=times,sim)
sumry.stats2 <- lapply(simdf.list2,sumry.cycl) %>% bind_rows()
sumry.stats2 <- sumry.stats2 %>%
mutate(scaling=scaling,vaccineImmunity='tau1=b*theta1\ntau2=1')
sumry.stats2b <- lapply(simdf.list2, sumry.cycl2) %>% bind_rows()
sumry.stats2b <- sumry.stats2b %>%
mutate(scaling=scaling,vaccineImmunity='tau1=b*theta1\ntau2=1')
simdf.list3 <- lapply(rho,rel.parm=rel.parm,parms.init=parms3,odefunc=sirmod,
start.cond=start,times.vec=times,sim)
sumry.stats3 <- lapply(simdf.list3,sumry.cycl) %>% bind_rows()
sumry.stats3 <- sumry.stats3 %>%
mutate(scaling=scaling,vaccineImmunity='tau1=1\ntau2=b*theta2')
sumry.stats3b <- lapply(simdf.list3, sumry.cycl2) %>% bind_rows()
sumry.stats3b <- sumry.stats3b %>%
mutate(scaling=scaling,vaccineImmunity='tau1=b*theta1\ntau2=1')
stats.sum <- bind_rows(stats.sum,sumry.stats1,sumry.stats2,sumry.stats3)
stats.sum2 <- bind_rows(stats.sum2,sumry.stats1b,sumry.stats2b,sumry.stats3b)
tmp.list <- list(simdf.list1,simdf.list2,simdf.list3,scaling=scaling)
simdf.meta.list <- append(simdf.meta.list,tmp.list)
}
stats.sum$scaling2 <- paste0('b==',stats.sum$scaling)
stats.sum2$scaling2 <- paste0('b==',stats.sum2$scaling)
png('fitted_vac/fitted_vac8.png',res=300,units='cm',width=14,height=10)
ggplot(stats.sum,aes(x=vac.cov/52*100,color=strain))+
geom_line(aes(y=avg.inci*1000))+
xlab('Vaccination rate (%) per week') +
ylab('Average weekly incidence in 1000')+
facet_grid(vaccineImmunity ~ scaling2,labeller=
labeller(.rows = label_value, .cols = label_parsed))+
scale_color_manual(values=c('darkred','steelblue')) +
scale_x_continuous(breaks = c(0,0.5,1,1.5,2),label=
c('0','0.5','1','1.5','2'))+
theme_classic()+
theme(
legend.position = c(0.9, 0.5),
legend.title = element_blank(),
legend.background = element_rect(fill=NA),
axis.line = element_line())
dev.off()
png('fitted_vac/fitted_vac8_dur.png',res=300,units='cm',width=14,height=10)
ggplot(stats.sum.vac.dur,aes(x=vac.cov/52*100,color=strain))+
geom_line(aes(y=avg.inci*1000))+
xlab('Vaccination rate (%) per week') +
ylab('Average weekly incidence in 1000')+
facet_grid(vaccineImmunity~factor(scaling2,levels=rev(levels(unique(scaling2)))),labeller=
labeller(.rows = label_value, .cols = label_parsed))+
scale_color_manual(values=c('darkred','steelblue')) +
scale_x_continuous(breaks = c(0,0.5,1,1.5,2),label=
c('0','0.5','1','1.5','2'))+
theme_classic()+
theme(
legend.position = c(0.9, 0.5),
legend.title = element_blank(),
legend.background = element_rect(fill=NA),
axis.line = element_line())
stats.sum$scaling2 <- paste0('b==',stats.sum$scaling)
stats.sum2$scaling2 <- paste0('b==',stats.sum2$scaling)
png('fitted_vac/fitted_vac8.png',res=300,units='cm',width=14,height=10)
ggplot(stats.sum,aes(x=vac.cov/52*100,color=strain))+
geom_line(aes(y=avg.inci*1000))+
xlab('Vaccination rate (%) per week') +
ylab('Average weekly incidence in 1000')+
facet_grid(vaccineImmunity ~ scaling2,labeller=
labeller(.rows = label_value, .cols = label_parsed))+
scale_color_manual(values=c('darkred','steelblue')) +
scale_x_continuous(breaks = c(0,0.5,1,1.5,2),label=
c('0','0.5','1','1.5','2'))+
theme_classic()+
theme(
legend.position = c(0.9, 0.5),
legend.title = element_blank(),
legend.background = element_rect(fill=NA),
axis.line = element_line())
dev.off()
load("/Users/qiqiy/Documents/P3_UIV/BroadFluVacModel/calibration/USA.expPand_sim_exps/fit_2parms.rdata")
load("/Users/qiqiy/Documents/P3_UIV/BroadFluVacModel/calibration/USA.expPand_sim_exps/fit_2parms_cos_sin.rdata")
rm(list=ls())
library(dplyr)
library(deSolve)
library(lubridate)
library(ggplot2)
theme_set(theme_bw())
# load('USA.inci.RData')
inci <- read.csv('data/USA/no.cases_inci.allsubtypes.csv')
# setwd('/Users/qiqiy/Documents/P2_WAI/manuscript/HPAI_Bird_world/Scripts/Correlation_bird_virus_continuous/code')
setwd('/Users/qiqiy/Documents/P2_WAI/manuscript/HPAI_Bird_world/Scripts/4Markov_jump')
# mj <- read.csv('../data/virus_od_month_migtimes_bf3.csv')
# mj <- read.csv('virus_od_month_migtimes_bf3_2.3.2.1.csv')
mj <- read.csv('virus_od_month_migtimes_bf3_2.3.4.4New.csv')
library(dplyr)
# loc <- read.csv('2.3.2.1f_location.csv')
loc <- read.csv('2.3.4.4Newf_location.csv')
for(i in 1:nrow(mj)){
mj[i,'origin'] <- strsplit(mj[i,'od'],'-')[[1]][1]
mj[i,'dest'] <- strsplit(mj[i,'od'],'-')[[1]][2]
}
mj <- mj %>%
inner_join(loc,by=c('origin'='Location'))  %>%
inner_join(loc,by=c('dest'='Location')) %>%
mutate(direction=ifelse(lat.x-lat.y<0,'SN','NS'),delta_lat=lat.x-lat.y) %>%
arrange(delta_lat)
View(mj)
View(mj)
unique(mj$od)
