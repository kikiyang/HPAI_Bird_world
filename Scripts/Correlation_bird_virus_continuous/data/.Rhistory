col=c(1, 2, 3),
legend=c("S", "I", "R"),
lty=c(1, 1, 1)
)
SIR.output[nrow(SIR.output),]
library(deSolve)
## with vaccination
## mean life expectancy 4 years
mu <- 1/(70*365)
R0 <- 5
## mean infectious period 7 days
gamma <- 1/5
delta <-1/90
p <- 1/30
N <- 10000
S <- 9999
I <- 1
R <- 0
## R0 = beta*N/(gamma+mu)
beta=R0*(gamma+mu)/N
#beta <- 3
y0 <- c(S=S, I=I, R=R)
parms0 <- c(beta=beta, gamma=gamma, mu=mu, delta=delta, p=p)
dx.dt.SIR <- function(t, y, parms) {
# Calculate the change in Susceptibles
dS <- parms["mu"] * (y["S"] + y["I"] + y["R"])- parms["p"]*y["S"]-
parms["beta"] * y["S"] * y["I"] -
parms["mu"] * y["S"]+ parms["delta"]* y["R"]
# Calculate the change in Infecteds
dI <- parms["beta"] * y["S"] * y["I"] -
parms["gamma"] * y["I"] -
parms["mu"] * y["I"]
# Calculate the change in Recovereds
dR <- parms["gamma"] * y["I"] -
parms["mu"] * y["R"] - parms["delta"]* y["R"] +
+parms["p"]*y["S"]
# Return a list with the changes in S, I, R at the current time step
return(list(c(dS, dI, dR)))
}
tvec <- seq(0, 1*365, by=1)
SIR.output <- lsoda(y=y0, times=tvec, func=dx.dt.SIR, parms=parms0)
plot(SIR.output[,"S"], type="l",
xlab="Time (days)",
ylab="Number of individuals",
ylim=c(0,11000))
lines(SIR.output[,"I"], col=2)
lines(SIR.output[,"R"], col=3)
legend(
"top",
col=c(1, 2, 3),
legend=c("S", "I", "R"),
lty=c(1, 1, 1)
)
SIR.output[nrow(SIR.output),]
library(deSolve)
## with vaccination
## mean life expectancy 4 years
mu <- 1/(70*365)
R0 <- 5
## mean infectious period 7 days
gamma <- 1/5
delta <-1/90
p <- 1/60
N <- 10000
S <- 9999
I <- 1
R <- 0
## R0 = beta*N/(gamma+mu)
beta=R0*(gamma+mu)/N
#beta <- 3
y0 <- c(S=S, I=I, R=R)
parms0 <- c(beta=beta, gamma=gamma, mu=mu, delta=delta, p=p)
dx.dt.SIR <- function(t, y, parms) {
# Calculate the change in Susceptibles
dS <- parms["mu"] * (y["S"] + y["I"] + y["R"])- parms["p"]*y["S"]-
parms["beta"] * y["S"] * y["I"] -
parms["mu"] * y["S"]+ parms["delta"]* y["R"]
# Calculate the change in Infecteds
dI <- parms["beta"] * y["S"] * y["I"] -
parms["gamma"] * y["I"] -
parms["mu"] * y["I"]
# Calculate the change in Recovereds
dR <- parms["gamma"] * y["I"] -
parms["mu"] * y["R"] - parms["delta"]* y["R"] +
+parms["p"]*y["S"]
# Return a list with the changes in S, I, R at the current time step
return(list(c(dS, dI, dR)))
}
tvec <- seq(0, 1*365, by=1)
SIR.output <- lsoda(y=y0, times=tvec, func=dx.dt.SIR, parms=parms0)
plot(SIR.output[,"S"], type="l",
xlab="Time (days)",
ylab="Number of individuals",
ylim=c(0,11000))
lines(SIR.output[,"I"], col=2)
lines(SIR.output[,"R"], col=3)
legend(
"top",
col=c(1, 2, 3),
legend=c("S", "I", "R"),
lty=c(1, 1, 1)
)
SIR.output[nrow(SIR.output),]
library(deSolve)
## with vaccination
## mean life expectancy 4 years
mu <- 1/(70*365)
R0 <- 5
## mean infectious period 7 days
gamma <- 1/5
delta <-1/90
p <- 1/90
N <- 10000
S <- 9999
I <- 1
R <- 0
## R0 = beta*N/(gamma+mu)
beta=R0*(gamma+mu)/N
#beta <- 3
y0 <- c(S=S, I=I, R=R)
parms0 <- c(beta=beta, gamma=gamma, mu=mu, delta=delta, p=p)
dx.dt.SIR <- function(t, y, parms) {
# Calculate the change in Susceptibles
dS <- parms["mu"] * (y["S"] + y["I"] + y["R"])- parms["p"]*y["S"]-
parms["beta"] * y["S"] * y["I"] -
parms["mu"] * y["S"]+ parms["delta"]* y["R"]
# Calculate the change in Infecteds
dI <- parms["beta"] * y["S"] * y["I"] -
parms["gamma"] * y["I"] -
parms["mu"] * y["I"]
# Calculate the change in Recovereds
dR <- parms["gamma"] * y["I"] -
parms["mu"] * y["R"] - parms["delta"]* y["R"] +
+parms["p"]*y["S"]
# Return a list with the changes in S, I, R at the current time step
return(list(c(dS, dI, dR)))
}
tvec <- seq(0, 1*365, by=1)
SIR.output <- lsoda(y=y0, times=tvec, func=dx.dt.SIR, parms=parms0)
plot(SIR.output[,"S"], type="l",
xlab="Time (days)",
ylab="Number of individuals",
ylim=c(0,11000))
lines(SIR.output[,"I"], col=2)
lines(SIR.output[,"R"], col=3)
legend(
"top",
col=c(1, 2, 3),
legend=c("S", "I", "R"),
lty=c(1, 1, 1)
)
SIR.output[nrow(SIR.output),]
library(deSolve)
## with vaccination
## mean life expectancy 4 years
mu <- 1/(70*365)
R0 <- 5
## mean infectious period 7 days
gamma <- 1/5
delta <-1/90
p <- 1/30
N <- 10000
S <- 9999
I <- 1
R <- 0
## R0 = beta*N/(gamma+mu)
beta=R0*(gamma+mu)/N
#beta <- 3
y0 <- c(S=S, I=I, R=R)
parms0 <- c(beta=beta, gamma=gamma, mu=mu, delta=delta, p=p)
dx.dt.SIR <- function(t, y, parms) {
# Calculate the change in Susceptibles
dS <- parms["mu"] * (y["S"] + y["I"] + y["R"])- parms["p"]*y["S"]-
parms["beta"] * y["S"] * y["I"] -
parms["mu"] * y["S"]+ parms["delta"]* y["R"]
# Calculate the change in Infecteds
dI <- parms["beta"] * y["S"] * y["I"] -
parms["gamma"] * y["I"] -
parms["mu"] * y["I"]
# Calculate the change in Recovereds
dR <- parms["gamma"] * y["I"] -
parms["mu"] * y["R"] - parms["delta"]* y["R"] +
+parms["p"]*y["S"]
# Return a list with the changes in S, I, R at the current time step
return(list(c(dS, dI, dR)))
}
tvec <- seq(0, 1*365, by=1)
SIR.output <- lsoda(y=y0, times=tvec, func=dx.dt.SIR, parms=parms0)
plot(SIR.output[,"S"], type="l",
xlab="Time (days)",
ylab="Number of individuals",
ylim=c(0,11000))
lines(SIR.output[,"I"], col=2)
lines(SIR.output[,"R"], col=3)
legend(
"top",
col=c(1, 2, 3),
legend=c("S", "I", "R"),
lty=c(1, 1, 1)
)
SIR.output[nrow(SIR.output),]
library(deSolve)
## with vaccination
## mean life expectancy 4 years
mu <- 1/(70*365)
R0 <- 5
## mean infectious period 7 days
gamma <- 1/5
delta <-1/90
p <- 1/90
N <- 10000
S <- 9999
I <- 1
R <- 0
## R0 = beta*N/(gamma+mu)
beta=R0*(gamma+mu)/N
#beta <- 3
y0 <- c(S=S, I=I, R=R)
parms0 <- c(beta=beta, gamma=gamma, mu=mu, delta=delta, p=p)
dx.dt.SIR <- function(t, y, parms) {
# Calculate the change in Susceptibles
dS <- parms["mu"] * (y["S"] + y["I"] + y["R"])- parms["p"]*y["S"]-
parms["beta"] * y["S"] * y["I"] -
parms["mu"] * y["S"]+ parms["delta"]* y["R"]
# Calculate the change in Infecteds
dI <- parms["beta"] * y["S"] * y["I"] -
parms["gamma"] * y["I"] -
parms["mu"] * y["I"]
# Calculate the change in Recovereds
dR <- parms["gamma"] * y["I"] -
parms["mu"] * y["R"] - parms["delta"]* y["R"] +
+parms["p"]*y["S"]
# Return a list with the changes in S, I, R at the current time step
return(list(c(dS, dI, dR)))
}
tvec <- seq(0, 1*365, by=1)
SIR.output <- lsoda(y=y0, times=tvec, func=dx.dt.SIR, parms=parms0)
plot(SIR.output[,"S"], type="l",
xlab="Time (days)",
ylab="Number of individuals",
ylim=c(0,11000))
lines(SIR.output[,"I"], col=2)
lines(SIR.output[,"R"], col=3)
legend(
"top",
col=c(1, 2, 3),
legend=c("S", "I", "R"),
lty=c(1, 1, 1)
)
SIR.output[nrow(SIR.output),]
library(deSolve)
## with vaccination
## mean life expectancy 4 years
mu <- 1/(70*365)
R0 <- 5
## mean infectious period 7 days
gamma <- 1/5
delta <-1/90
p <- 1/30
N <- 10000
S <- 9999
I <- 1
R <- 0
## R0 = beta*N/(gamma+mu)
beta=R0*(gamma+mu)/N
#beta <- 3
y0 <- c(S=S, I=I, R=R)
parms0 <- c(beta=beta, gamma=gamma, mu=mu, delta=delta, p=p)
dx.dt.SIR <- function(t, y, parms) {
# Calculate the change in Susceptibles
dS <- parms["mu"] * (y["S"] + y["I"] + y["R"])- parms["p"]*y["S"]-
parms["beta"] * y["S"] * y["I"] -
parms["mu"] * y["S"]+ parms["delta"]* y["R"]
# Calculate the change in Infecteds
dI <- parms["beta"] * y["S"] * y["I"] -
parms["gamma"] * y["I"] -
parms["mu"] * y["I"]
# Calculate the change in Recovereds
dR <- parms["gamma"] * y["I"] -
parms["mu"] * y["R"] - parms["delta"]* y["R"] +
+parms["p"]*y["S"]
# Return a list with the changes in S, I, R at the current time step
return(list(c(dS, dI, dR)))
}
tvec <- seq(0, 1*365, by=1)
SIR.output <- lsoda(y=y0, times=tvec, func=dx.dt.SIR, parms=parms0)
plot(SIR.output[,"S"], type="l",
xlab="Time (days)",
ylab="Number of individuals",
ylim=c(0,11000))
lines(SIR.output[,"I"], col=2)
lines(SIR.output[,"R"], col=3)
legend(
"top",
col=c(1, 2, 3),
legend=c("S", "I", "R"),
lty=c(1, 1, 1)
)
SIR.output[nrow(SIR.output),]
setwd('/Users/qiqiy/Documents/P2_WAI/P2_WAI/Contiuous_spatial/dispersal/2.3.4.4fCS_empT')
library(seraphim)
library(lubridate)
library(raster)
load('month.avg.raster.RData')
env.names <- c('January','Feburary','March',
'April', 'May', 'June',
'July', 'August', 'September',
'October','November','December','Chicken','Ducks')
load('month.avg.RData')
pathModel = 2
resistances <- list()
avgResistances <- list()
for (i in 1:length(month.avg)){
resistances[[i]] <- FALSE
avgResistances[[i]] <- FALSE
}
fourCells = FALSE
nberOfRandomisations = 0
randomProcedure = 3
outputName = "month_avg_vel"
envVariables <- list()
envVariables[[1]] <- month.avg[[14]]
envVariables[[2]] <- month.avg[[1]]
spreadFactors(localTreesDirectory='Extracted_trees_sub100',
nberOfExtractionFiles=100, envVariables,
pathModel, resistances, avgResistances, fourCells,
nberOfRandomisations,randomProcedure, outputName)
View(month.avg)
spreadFactors(localTreesDirectory='Extracted_trees_sub100',
nberOfExtractionFiles=100, envVariables = month.avg,
pathModel, resistances, avgResistances, fourCells,
nberOfRandomisations,randomProcedure, outputName)
load('month.avg.raster.RData')
spreadFactors(localTreesDirectory='Extracted_trees_sub100',
nberOfExtractionFiles=100, envVariables = month.avg,
pathModel, resistances, avgResistances, fourCells,
nberOfRandomisations,randomProcedure, outputName)
setwd('../../../../')
setwd('RRW/hmc_run/')
library(seraphim)
localTreesDirectory = "Extracted_trees"
allTrees=scan(file="2.3.4.4fCS_RRW_sub1k.trees", what="", sep="\n", quiet=TRUE)
library(lubridate)
decimal_date(2018.0246575342467)
date_decimal(2018.0246575342467)
burnIn=0
randomSampling=FALSE
nberOfTreesToSample=1000
mostRecentSamplingDatum=2018.0246575342467
coordinateAttributeName = "location"
treeExtractions(localTreesDirectory, allTrees, burnIn, randomSampling,
nberOfTreesToSample, mostRecentSamplingDatum, coordinateAttributeName)
library(seraphim)
library(lubridate)
localTreesDirectory = "Extracted_trees"
allTrees=scan(file="2.3.4.4fCS_RRW_sub100.trees", what="", sep="\n", quiet=TRUE)
burnIn=0
randomSampling=FALSE
nberOfTreesToSample=100
mostRecentSamplingDatum=2018.0246575342467
coordinateAttributeName = "location"
treeExtractions(localTreesDirectory, allTrees, burnIn, randomSampling,
nberOfTreesToSample, mostRecentSamplingDatum, coordinateAttributeName)
nberOfExtractionFiles = 100
timeSlices = 100
onlyTipBranches = FALSE
showingPlots = FALSE
outputName = "2_3_4_4_dispersal_stats"
nberOfCores = 1
slidingWindow = 1
spreadStatistics(localTreesDirectory, nberOfExtractionFiles, timeSlices,
onlyTipBranches, showingPlots, outputName, nberOfCores, slidingWindow)
library(lubridate)
decimal_date('2018-01-10')
decimal_date(ymd('2018-01-10'))
decimal_date(ymd('2009-12-10'))
2018.025-2009.94
2018.025+0.071232877
date_decimal(2018.025+0.071232877)
date_decimal(2009.94+0.071232877)
date_decimal(2009.94+0.0246575342466713)
date_decimal(2009.94+9.86072310801705)
decimal_date(ymd('2009-12-15'))
date_decimal(2009.953+0.0246575342466713)
date_decimal(2009.953+0.071232877)
?lubridate
interval(start="2009-12-10",end="2018-01-10")
as.period(interval(start="2009-12-10",end="2018-01-10"),unit="month")
12*(2017-2009+1)
12*(2017-2009)
date_decimal(2018.096-0.071232877)
date_decimal(2018.025-0.071232877)
date_decimal(2018.025-0.0246575342466713)
date_decimal(2018.025-9.899452464)
date_decimal(2018.025-9.86072310801705)
nberOfExtractionFiles = 100
timeSlices = 100
onlyTipBranches = FALSE
showingPlots = FALSE
nberOfExtractionFiles = 100
timeSlices = 100
onlyTipBranches = FALSE
showingPlots = TRUE
outputName = "2_3_4_4"
nberOfCores = 8
slidingWindow = 1
spreadStatistics(localTreesDirectory, nberOfExtractionFiles, timeSlices,
onlyTipBranches, showingPlots, outputName, nberOfCores, slidingWindow)
library(seraphim)
library(lubridate)
localTreesDirectory = "Extracted_trees"
library(diagram)
nberOfExtractionFiles = 100
timeSlices = 119
onlyTipBranches = FALSE
showingPlots = TRUE
outputName = "2_3_4_4"
nberOfCores = 8
slidingWindow = 1
showingPlots = FALSE
outputName = "RRW"
spreadStatistics(localTreesDirectory, nberOfExtractionFiles, timeSlices,
onlyTipBranches, showingPlots, outputName, nberOfCores, slidingWindow)
library(RColorBrewer)
setwd('../data')
setwd('/Users/qiqiy/Documents/P2_WAI/manuscript/HPAI_Bird_world/Scripts/Correlation_bird_virus_continuous/data')
# virus <- read.csv('dataset_2.3.4.4.csv')
# bird <- read.csv('2.3.4.4_crosscorr/allbirds_prob.csv')
virus2 <- read.csv('2.3.4.4_crosscorr/virus_prob_minHPD.csv') %>%
select(-X,-point,-lon_indx,-lat_indx) %>%
mutate(year=year(ymd(Date)),month=month(ymd(Date)))
library(dplyr)
library(tidyr)
#install.packages('ncf')
library(ncf)
library(lubridate)
# virus <- read.csv('dataset_2.3.4.4.csv')
# bird <- read.csv('2.3.4.4_crosscorr/allbirds_prob.csv')
virus2 <- read.csv('2.3.4.4_crosscorr/virus_prob_minHPD.csv') %>%
select(-X,-point,-lon_indx,-lat_indx) %>%
mutate(year=year(ymd(Date)),month=month(ymd(Date)))
## viruses
virus <- virus2 %>%
select(Date,year,month,lat,lon,virus) %>%
arrange(year,month)
virus_wide <- virus %>%
pivot_wider(id_cols = c(lat,lon),names_from = Date,
values_from = virus)
virus_08_13 <- virus_wide[,c(1:73)]
virus_14_18 <- virus_wide[,c(1:2,74:121)]
## birds
bird <- virus2 %>%
select(-virus) %>%
arrange(year,month)
Pelecan <- bird %>%
pivot_wider(id_cols = c(lat,lon),names_from=Date,values_from=Pelecaniformes)
Grui <- bird %>%
pivot_wider(id_cols = c(lat,lon),names_from=Date,values_from=Gruiformes)
Passerin <- bird %>%
pivot_wider(id_cols = c(lat,lon),names_from=Date,values_from=Passeriformes)
Suli <- bird %>%
pivot_wider(id_cols = c(lat,lon),names_from=Date,values_from=Suliformes)
Cicon <- bird %>%
pivot_wider(id_cols = c(lat,lon),names_from=Date,values_from=Ciconiiformes)
Falcon <- bird %>%
pivot_wider(id_cols = c(lat,lon),names_from=Date,values_from=Falconiformes)
Charad <- bird %>%
pivot_wider(id_cols = c(lat,lon),names_from=Date,values_from=Charadriiformes)
Anser <- bird %>%
pivot_wider(id_cols = c(lat,lon),names_from=Date,values_from=Anseriformes)
Accipit <- bird %>%
pivot_wider(id_cols = c(lat,lon),names_from=Date,values_from=Accipitriformes)
# Procella <- bird %>%
#   pivot_wider(id_cols = c(lat,lon),names_from=Date,values_from=Procellariiformes)
birds.dfs <- list(Pelecan,Grui,Passerin,Suli,Cicon,Falcon,Charad,Anser,Accipit)
birds.names <- c('Pelecaniformes','Gruiformes','Passeriformes',
'Suliformes', 'Ciconiiformes', 'Falconiformes',
'Charadriiformes', 'Anseriformes', 'Accipitriformes')
# virus.m <- as.matrix(virus_wide %>% select(-lat,-lon))
# virus.m[is.na(virus.m)]<-0
# birds.m.ls <- list()
# for(idx in c(1:9)){
#   birds.m <- as.matrix(birds.dfs[[idx]] %>% select(-lat,-lon))
#   birds.m[is.na(birds.m)]<-0
#   birds.m.ls[[idx]] <- birds.m
#
# }
# # cross-correlation
snf.Pelecan <- Sncf(x=virus_wide$lon,y=virus_wide$lat,z=virus.m,
w=birds.m.ls[[1]],na.rm=TRUE,latlon = TRUE)
virus.m <- as.matrix(virus_wide %>% select(-lat,-lon))
virus.m[is.na(virus.m)]<-0
birds.m.ls <- list()
for(idx in c(1:9)){
birds.m <- as.matrix(birds.dfs[[idx]] %>% select(-lat,-lon))
birds.m[is.na(birds.m)]<-0
birds.m.ls[[idx]] <- birds.m
}
# # cross-correlation
snf.Pelecan <- Sncf(x=virus_wide$lon,y=virus_wide$lat,z=virus.m,
w=birds.m.ls[[1]],na.rm=TRUE,latlon = TRUE)
plot(snf.Pelecan)
dev.off()
plot(snf.Pelecan)
pdf(file='snf_virus_Pelecans.pdf')
dev.off()
dev.off()
plot(snf.Pelecan)
snf.ls <- list()
snf.ls[[1]] <- snf.Pelecan
save.image(file="Sncf_temp.RData")
rm(list=ls())
